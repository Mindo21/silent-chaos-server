#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('silent-chaos-server:server');
var http = require('http');

const socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Set up the sockets
 */

const io = socket(server);

// let orders = [];
let order;

io.on('connection', function(socket) {
  console.log('made socket connection', socket.id);
  order = {
    wsId: socket.id,
    status: "NOT_STARTED"
  };
  // orders.push(order);
  socket.emit('output', order);


  socket.on('test', function(data) {
      console.log('got a socket emit test: ', data.message);
      io.emit('test', data);
  });

  socket.on('START', startOrder);

  // socket.on('ORDER', addToOrder);

  // socket.on('START_PAY', startPay);

  // socket.on('PAY', pay);

  // socket.on('CLOSE_PAY', closePay);

  // socket.on('CLOSE', closeOrder);

  function startOrder(data) {
    // let order = orders.find((order) => {
    //   order.
    // });
    // socket.id;
    order.status = "STARTED";
    io.emit('output', order);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = {
  io: io,
}